library(caret)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
detach("package:lattice", unload = TRUE)
library(lattice, lib.loc = "C:/Program Files/R/R-4.3.1/library")
library(caret)
library(rpart)
library(rpart.plot)
data <- read.csv("D:/DSprojekt/dsp/heart.csv")
Select different columns
data <- data[,c("age", "sex", "cp", "trtbps", "chol", "fbs", "restecg", "thalachh", "exng", "oldpeak", "slp", "caa", "thall", "output")]
set.seed(123)
index <- createDataPartition(data$output, p=0.7, list=FALSE)
train_set <- data[index,]
test_set <- data[-index,]
logit_model <- glm(output ~ ., family=binomial(link='logit'), data=train_set)
summary(logit_model)
logit_pred <- predict(logit_model, newdata=test_set, type="response")
logit_pred <- ifelse(logit_pred > 0.5,1,0)
tree_model <- rpart(output ~ ., data=train_set, method="class")
summary(tree_model)
tree_model <- rpart(output ~ ., data=train_set, method="class")
summary(tree_model)
tree_pred <- predict(tree_model, newdata=test_set, type="class")
logit_acc <- sum(diag(confusionMatrix(as.factor(logit_pred), as.factor(test_set$output))$table)) / sum(confusionMatrix(as.factor(logit_pred), as.factor(test_set$output))$table)
tree_acc <- sum(diag(confusionMatrix(as.factor(tree_pred), as.factor(test_set$output))$table)) / sum(confusionMatrix(as.factor(tree_pred), as.factor(test_set$output))$table)
print(paste("Logistic Regression Accuracy: ", logit_acc))
print(paste("Decision Tree Accuracy: ", tree_acc))
mean_values <- sapply(df, mean, na.rm = TRUE)
max_values <- sapply(df, max, na.rm = TRUE)
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
mode_values <- sapply(df, getmode)
hist(df$age, main="Histogram for Age", xlab="Age")
hist(data$age, main="Histogram for Age", xlab="Age")
pie(table(data$sex), main="Pie Chart for Sex")
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
mode_values <- sapply(data, getmode)
mean_values <- sapply(data, mean, na.rm = TRUE)
max_values <- sapply(data, max, na.rm = TRUE)
variance_values <- sapply(data, var, na.rm = TRUE)
print(paste("Mean: ", mean_values))
print(paste("Max: ", max_values))
print(paste("Mode: ", mode_values))
print(paste("Variance: ", variance_values))
library(caret)
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
detach("package:lattice", unload = TRUE)
library(lattice, lib.loc = "C:/Program Files/R/R-4.3.1/library")
detach("package:caret", unload = TRUE)
library(caret)
library(rpart, lib.loc = "C:/Program Files/R/R-4.3.1/library")
library(rpart.plot)
data <- read.csv("D:/DSprojekt/dsp/heart.csv")
fit <- rpart(output ~ age + sex + cp + trtbps + chol + fbs + restecg + thalachh + exng + oldpeak + slp + caa + thall, data = data, method = "class")
printcp(fit)
plot(fit, uniform=TRUE, main="Decision Tree")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE, main="Decision Tree")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
Plot histogram for a column (replace 'age' with your column name)
data <- read.csv("D:/DSprojekt/dsp/heart.csv")
library(caret)
detach("package:lattice", unload = TRUE)
library(lattice, lib.loc = "C:/Program Files/R/R-4.3.1/library")
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
detach("package:caret", unload = TRUE)
library(caret)
library(rpart, lib.loc = "C:/Program Files/R/R-4.3.1/library")
library(rpart.plot)
num_col <- c('age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium', 'time')
par(mfrow=c(2,4)) # set up the graphics
for (i in num_col){
hist(df[[i]], main=i, xlab=i)
}
num_col <- c('age', 'creatinine_phosphokinase', 'ejection_fraction', 'platelets', 'serum_creatinine', 'serum_sodium', 'time')
par(mfrow=c(2,4)) # set up the graphics
for (i in num_col){
hist(data[[i]], main=i, xlab=i)
}
num_col <- c('age', 'creatinine_phosphokinase', 'time')
par(mfrow=c(2,4)) # set up the graphics
for (i in num_col){
hist(data[[i]], main=i, xlab=i)
}
heart <- read.csv("D:/DSprojekt/dsp/heart.csv")
View(heart)
variables <- names(data)
par(mfrow=c(3,4))
for (var in variables){
hist(data[[var]], main=var, xlab=var)
par(mfrow=c(3,4)) # Adjust this based on the number of variables
for (var in variables){
pie(table(df[[var]]), main=var)
}
par(mfrow=c(3,4)) # Adjust this based on the number of variables
for (var in variables){
plot(density(df[[var]], na.rm=TRUE), main=var)
}
dfd
sda
asas
data <- read.csv("D:/DSprojekt/dsp/heart.csv")
library(ggplot2)
library(caret)
detach("package:lattice", unload = TRUE)
library(lattice, lib.loc = "C:/Program Files/R/R-4.3.1/library")
detach("package:ggplot2", unload = TRUE)
library(ggplot2)
detach("package:caret", unload = TRUE)
library(caret)
library(rpart.plot)
library(glue)
detach("package:glue", unload = TRUE)
detach("package:rpart", unload = TRUE)
library(rpart, lib.loc = "C:/Program Files/R/R-4.3.1/library")
detach("package:rpart.plot", unload = TRUE)
library(rpart.plot)
variables <- names(data)
par(mfrow=c(3,4))
for (var in variables){
hist(data[[var]], main=var, xlab=var)
}
variables <- names(df)
# Histograms
par(mfrow=c(3,4)) # Adjust this based on the number of variables
for (var in variables){
hist(df[[var]], main=var, xlab=var)
}
dev.off() # Close the current graphics device
variables <- names(df)
# Histograms
par(mfrow=c(3,4)) # Adjust this based on the number of variables
for (var in variables){
hist(df[[var]], main=var, xlab=var)
}
dev.off() # Close the current graphics device
variables <- names(data)
par(mfrow=c(3,4))
for (var in variables){
hist(data[[var]], main=var, xlab=var)
}
variables <- names(data)
par(mar = c(1, 1, 1, 1))
for (var in variables){
hist(data[[var]], main=var, xlab=var)
}
dev.off()
variables <- names(data)
par(mar = c(1, 1, 1, 1))
for (var in variables){
hist(data[[var]], main=var, xlab=var)
}
library(caret)
library(rpart)
library(rpart.plot)
data <- read.csv("D:/DSprojekt/dsp/heart.csv")
hist(data$age, main="Histogram for Age", xlab="Age")
hist(data$age, main="Histogram for Sex", xlab="sex")
ggplot(data, aes(x=chol)) +
geom_histogram(binwidth=1, color="black", fill="white") +
labs(title="Histogram for chol", x="chol", y="Frequency")
ggplot(data, aes(x=trtbps)) +
geom_histogram(binwidth=1, color="black", fill="white") +
labs(title="Histogram for trtbps", x="trtbps", y="Frequency")
ggplot(data, aes(x=chol)) +
geom_density(fill="blue", alpha=0.3) +
labs(title="Density Plot for chol", x="chol", y="Density")
ggplot(data, aes(x=trtbps)) +
geom_density(fill="blue", alpha=0.3) +
labs(title="Density Plot for trtbps", x="trtbps", y="Density")
ggplot(data, aes(x=age)) +
geom_density(fill="blue", alpha=0.3) +
labs(title="Density Plot for Age", x="Age", y="Density")
q()
data <- read.csv("D:/DSprojekt/dsp/heart.csv")
library(caret)
library(rpart)
data <- data[,c("age", "sex", "cp", "trtbps", "chol", "fbs", "restecg", "thalachh", "exng", "oldpeak", "slp", "caa", "thall", "output")]
set.seed(123)
index <- createDataPartition(data$output, p=0.7, list=FALSE)
train_set <- data[index,]
test_set <- data[-index,]
logit_model <- glm(output ~ ., family=binomial(link='logit'), data=train_set)
summary(logit_model)
logit_pred <- predict(logit_model, newdata=test_set, type="response")
logit_pred <- ifelse(logit_pred > 0.5,1,0)
tree_model <- rpart(output ~ ., data=train_set, method="class")
summary(tree_model)
tree_pred <- predict(tree_model, newdata=test_set, type="class")
logit_acc <- sum(diag(confusionMatrix(as.factor(logit_pred), as.factor(test_set$output))$table)) / sum(confusionMatrix(as.factor(logit_pred), as.factor(test_set$output))$table)
tree_acc <- sum(diag(confusionMatrix(as.factor(tree_pred), as.factor(test_set$output))$table)) / sum(confusionMatrix(as.factor(tree_pred), as.factor(test_set$output))$table)
print(paste("Logistic Regression Accuracy: ", logit_acc))
print(paste("Decision Tree Accuracy: ", tree_acc))
fit <- rpart(output ~ age + sex + cp + trtbps + chol + fbs + restecg + thalachh + exng + oldpeak + slp + caa + thall, data = data, method = "class")
printcp(fit)
plot(fit, uniform=TRUE, main="Decision Tree")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE, main="Decision Tree")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
source("~/.active-rstudio-document")
save.image("D:/DSprojekt/dsp/heart failure prediction.RData")
load("D:/DSprojekt/dsp/heart failure prediction.RData")
View(data)
plot(fit, uniform=TRUE, main="Decision Tree")
plot(fit, uniform=TRUE, main="Decision Tree")
fit <- rpart(output ~ age + sex + cp + trtbps + chol + fbs + restecg + thalachh + exng + oldpeak + slp + caa + thall, data = data, method = "class")
fit <- rpart(output ~ age + sex + cp + trtbps + chol + fbs + restecg + thalachh + exng + oldpeak + slp + caa + thall, data = data, method = "class")
library(rpart)
library(caret)
fit <- rpart(output ~ age + sex + cp + trtbps + chol + fbs + restecg + thalachh + exng + oldpeak + slp + caa + thall, data = data, method = "class")
printcp(fit)
plot(fit, uniform=TRUE, main="Decision Tree")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE, main="Decision Tree")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
plot(fit, uniform=TRUE, main="Decision Tree")
text(fit, use.n=TRUE, all=TRUE, cex=.8)
library(rpart.plot)
rpart.plot(model)
rpart.plot(model.extract())
rpart.plot(mode_values)
library(rpart.plot)
